/* 
Yet Another Grid System
See https://github.com/kevindixon/yags
*/

/* 
Responsive breakpoints
*/
@breakpoint_medium_layout: 1024px;
@breakpoint_small_layout: 762px;

/*
Number of columns in the grid
*/
@columns_large_layout: 12;
@columns_medium_layout: 12;
@columns_small_layout: 6;

/*
Gutter size
*/
@gutter_large_layout: 40px;
@gutter_medium_layout: 30px;
@gutter_small_layout: 20px;

/* 
Calculated column sizes
*/
@column_width_large_layout: (100%/@columns_large_layout);
@column_width_medium_layout: (100%/@columns_medium_layout);
@column_width_small_layout: (100%/@columns_small_layout);

/* 
Mixin for adding media queries nested in a LESS class or mixin.
Adds a screen max-width query.
Usage:
	.my-class {
		font-size: 12px;
		.responsive(768px, { font-size: 14px; });
	}
*/
.responsive(@maxWidth; @rules) {
    @media only screen and (max-width: @maxWidth) {
        @rules();
    }
}

/* 
Border-box include
*/
.border-box() {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

/*
Row
*/
.row(@margin_left: false, @margin_right: false) {
	.border-box();
    *zoom: 1;

	/* ul/li compatibility */
    list-style-type: none;
    padding: 0;
    margin: 0;

	& when (@margin_left = true) {
		margin-left: 10px;
		.responsive(@breakpoint_medium_layout - 1) {
			margin-left: @gutter_medium_layout/2;
		}

		.responsive(@breakpoint_small_layout - 1) {
			margin-left: @gutter_small_layout/2;
		}

		margin-left: @gutter_large_layout/2;
	}

	& when (@margin_right = true) {
		.responsive(@breakpoint_medium_layout - 1) {
			margin-right: @gutter_medium_layout/2;
		}

		.responsive(@breakpoint_small_layout - 1) {
			margin-right: @gutter_small_layout/2;
		}

		margin-right: @gutter_large_layout/2;
	}

    &:before, &:after {
        display: table;
	    content: "";
	    line-height: 0;
		.border-box();
    }

    &:after {
	    clear: both;
	}

    /* Nested grid */
	& > & {
	    clear: none;
	    float: left;
	    margin: 0 !important;
	}
}

	
/* 
Cell
When calling, pass the number of columns for each layout
*/
.col(@large_cols:@num_columns_large, @medium_cols:@num_columns_medium, @small_cols:@num_columns_small) {
	.border-box();
    float: left;

	.responsive(@breakpoint_medium_layout - 1, {
		width: @column_width_medium_layout * @medium_cols;
	});

	.responsive(@breakpoint_small_layout - 1, {
		width: @column_width_small_layout * @small_cols;
	});

	&:after, &:before {
		.border-box();
	}

    width: @column_width_large_layout*@large_cols;
}

.col-inner() {
	margin-left: @gutter_large_layout/2;
	margin-right: @gutter_large_layout/2;

	.responsive(@breakpoint_medium_layout - 1, {
		margin-left: @gutter_medium_layout/2;
		margin-right: @gutter_medium_layout/2;
	});

	.responsive(@breakpoint_small_layout - 1, {
		margin-left: @gutter_small_layout/2;
		margin-right: @gutter_small_layout/2;
	});
}

.bleed(@left:true, @right:true) {
	& when (@left = true) {
		margin-left: 0px;
	}
	
	& when (@right = true ) {
		margin-right: 0px;
	}
}

.offset-right(@large_cols:@num_columns_large, @medium_cols:@num_columns_medium, @small_cols:@num_columns_small) {
	.responsive(@breakpoint_medium_layout - 1, {
		margin-left: @column_width_medium_layout * @medium_cols;
	});

	.responsive(@breakpoint_small_layout - 1, {
		margin-left: @column_width_small_layout * @small_cols;
	});

	margin-left: @column_width_large_layout * @large_cols;
}

.offset-left(@large_cols:@num_columns_large, @medium_cols:@num_columns_medium, @small_cols:@num_columns_small) {
	.responsive(@breakpoint_medium_layout - 1, {
		margin-right: @column_width_medium_layout * @medium_cols;
	});

	.responsive(@breakpoint_small_layout - 1, {
		margin-right: @column_width_small_layout * @small_cols;
	});

	margin-right: @column_width_large_layout * @large_cols;
}

