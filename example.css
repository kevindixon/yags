/* Built from SASS */
/*
Example usage of YAGS grid
Note that my use of lots of IDs here isn't a suggestion that you should use so many IDs - its just for convenience!
*/
/* resets */
body {
  margin: 0;
  padding: 0;
  background-color: #eeeeee;
  font-size: 12px; }

/* 
Yet Another Grid System
See https://github.com/kevindixon/yags
*/
/* 
Responsive breakpoints
*/
/*
Number of columns in the grid
*/
/*
Gutter size
*/
/* 
Calculated column sizes
*/
/* 
Mixin for adding media queries nested in a LESS class or mixin.
Adds a screen max-width query.
Usage:
	.my-class {
		font-size: 12px;
		@include responsive(768px) { font-size: 14px; }
	}
*/
/* 
Border-box include
*/
.border-box, .row, .block-group, .row:before, .block-group:before, .row:after, .block-group:after, .cell-base, .block-small, .block-medium, .block-large, .block-xlarge, #block-twentytwo, .overlay-col, .cell-base:after, .block-small:after, .block-medium:after, .block-large:after, .block-xlarge:after, #block-twentytwo:after, .overlay-col:after, .cell-base:before, .block-small:before, .block-medium:before, .block-large:before, .block-xlarge:before, #block-twentytwo:before, .overlay-col:before {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box; }

/*
Base class for a row
*/
.row, .block-group {
  *zoom: 1;
  /* ul/li compatibility */
  list-style-type: none;
  padding: 0;
  margin: 0;
  /* Nested grid */ }
  .row:before, .block-group:before, .row:after, .block-group:after {
    display: table;
    content: "";
    line-height: 0; }
  .row:after, .block-group:after {
    clear: both; }
  .row > .row, .block-group > .row, .row > .block-group, .block-group > .block-group {
    clear: none;
    float: left;
    margin: 0 !important; }

/*
Base class for a cell
*/
.cell-base, .block-small, .block-medium, .block-large, .block-xlarge, #block-twentytwo, .overlay-col {
  float: left; }

/* 
col
Mixin to set element covering variable number of columns per layout
When calling, pass the number of columns for each layout
*/
/*
col-mobile
Mixin to set element covering a number of columns for the mobile layout
When calling, pass the number of columns for the mobile layout
*/
/*
col-tablet
Mixin to set element covering a number of columns for the tablet layout
When calling, pass the number of columns for the tablet layout
*/
/*
col-desktop
Mixin to set element covering a number of columns for the desktop layout
When calling, pass the number of columns for the desktop layout
Note this is not wrapped in a media query (for older browser support) so should
come before mobile and tablet columns
*/
/*
col-gutter
Class to add fixed gutter to a cell element as margin
*/
.col-gutter, .block-inner, .overlay-col .inner {
  margin-left: 20px;
  margin-right: 20px; }
  @media only screen and (max-width: 1023px) {
    .col-gutter, .block-inner, .overlay-col .inner {
      margin-left: 15px;
      margin-right: 15px; } }
  @media only screen and (max-width: 761px) {
    .col-gutter, .block-inner, .overlay-col .inner {
      margin-left: 10px;
      margin-right: 10px; } }

/*
bleed-left
Class that bleeds a cell into the gutter on the left
*/
.bleed-left, .block-xlarge .block-inner, #block-sixteen .block-inner, #block-seventeen .block-inner {
  margin-left: 0px; }

/*
bleed-right
Class that bleeds a cell into the gutter on the right
*/
.bleed-right, .block-xlarge .block-inner, #block-seventeen .block-inner, #block-eighteen .block-inner {
  margin-right: 0px; }

/*
pull()
Moves a column to the left by a specified number of columns.
Use in combination with push() to swap the order of cells.
$large_cols: integer specifying the number of columns to move the element by in the large layout
$medium_cols: integer specifying the number of columns to move the element by in the medium layout
$small_cols: integer specifying the number of columns to move the element by in the small layout
*/
.pull-push-base, #block-twentyfive, #block-twentysix {
  position: relative; }

/*
push()
Moves a column to the right by a specified number of columns.
Use in combination with pull() to swap the order of cells.
$large_cols: integer specifying the number of columns to move the element by in the large layout
$medium_cols: integer specifying the number of columns to move the element by in the medium layout
$small_cols: integer specifying the number of columns to move the element by in the small layout
*/
.block {
  text-align: center; }

.block-inner {
  background-color: #dddddd;
  padding: 10px;
  border: 1px dashed black;
  height: 100px; }

.block-small {
  width: 8.33333%; }
  @media only screen and (max-width: 1023px) {
    .block-small {
      width: 8.33333%; } }
  @media only screen and (max-width: 761px) {
    .block-small {
      width: 16.66667%; } }

.block-medium {
  width: 33.33333%; }
  @media only screen and (max-width: 1023px) {
    .block-medium {
      width: 33.33333%; } }
  @media only screen and (max-width: 761px) {
    .block-medium {
      width: 33.33333%; } }

.block-large {
  width: 50%; }
  @media only screen and (max-width: 1023px) {
    .block-large {
      width: 100%; } }
  @media only screen and (max-width: 761px) {
    .block-large {
      width: 100%; } }

.block-xlarge {
  width: 100%; }
  @media only screen and (max-width: 1023px) {
    .block-xlarge {
      width: 100%; } }
  @media only screen and (max-width: 761px) {
    .block-xlarge {
      width: 100%; } }

#block-twentytwo {
  width: 16.66667%;
  margin-left: 16.66667%; }
  @media only screen and (max-width: 1023px) {
    #block-twentytwo {
      width: 16.66667%; } }
  @media only screen and (max-width: 761px) {
    #block-twentytwo {
      width: 16.66667%; } }
  @media only screen and (max-width: 1023px) {
    #block-twentytwo {
      margin-left: 8.33333%; } }
  @media only screen and (max-width: 761px) {
    #block-twentytwo {
      margin-left: 16.66667%; } }

#block-twentyfive {
  left: 33.33333%; }
  @media only screen and (max-width: 1023px) {
    #block-twentyfive {
      /* Move the column to the right
      (left == -BEFORE's width) */
      left: 33.33333%; } }
  @media only screen and (max-width: 761px) {
    #block-twentyfive {
      left: 33.33333%; } }

#block-twentysix {
  left: -33.33333%; }
  @media only screen and (max-width: 1023px) {
    #block-twentysix {
      /* Move the column to the left
      (left == -BEFORE's width) */
      left: -33.33333%; } }
  @media only screen and (max-width: 761px) {
    #block-twentysix {
      left: -33.33333%; } }

/*
Grid overlay 
*/
.grid-overlay {
  position: fixed;
  top: 0;
  height: 100%;
  width: 100%;
  z-index: 9999; }

.overlay-col {
  height: 100%;
  width: 8.33333%;
  background-color: red;
  opacity: 0.3; }
  @media only screen and (max-width: 1023px) {
    .overlay-col {
      width: 8.33333%; } }
  @media only screen and (max-width: 761px) {
    .overlay-col {
      width: 16.66667%; } }
  .overlay-col .inner {
    height: 100%;
    background-color: blue;
    opacity: 0.5; }

/*
Grid specified from HTML
*/
#from-html .col-gutter, #from-html .block-inner, #from-html .overlay-col .inner, .overlay-col #from-html .inner {
  background-color: #eeeeee;
  border: 1px dashed black;
  height: 100px; }

/*# sourceMappingURL=example.css.map */
