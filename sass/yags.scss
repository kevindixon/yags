/* 
Yet Another Grid System
See https://github.com/kevindixon/yags
*/

/* 
Responsive breakpoints
*/
$breakpoint_medium_layout: 1024px;
$breakpoint_small_layout: 762px;

/*
Number of columns in the grid
*/
$columns_large_layout: 12;
$columns_medium_layout: 12;
$columns_small_layout: 6;

/*
Gutter size
*/
$gutter_large_layout: 40px;
$gutter_medium_layout: 30px;
$gutter_small_layout: 20px;

/* 
Calculated column sizes
*/
$column_width_large_layout: (100%/$columns_large_layout);
$column_width_medium_layout: (100%/$columns_medium_layout);
$column_width_small_layout: (100%/$columns_small_layout);

/* 
Mixin for adding media queries nested in a LESS class or mixin.
Adds a screen max-width query.
Usage:
	.my-class {
		font-size: 12px;
		@include responsive(768px) { font-size: 14px; }
	}
*/
@mixin responsive($maxWidth) {
    @media only screen and (max-width: $maxWidth) {
        @content;
    }
}

/* 
Border-box include
*/
.border-box {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

/*
Base class for a row
*/
.row {
	@extend .border-box;
    *zoom: 1;

	/* ul/li compatibility */
    list-style-type: none;
    padding: 0;
    margin: 0;

    &:before, &:after {
        display: table;
	    content: "";
	    line-height: 0;
		@extend .border-box;
    }

    &:after {
	    clear: both;
	}

    /* Nested grid */
	& > & {
	    clear: none;
	    float: left;
	    margin: 0 !important;
	}
}

/*
Base class for a cell
*/
.cell-base {
	@extend .border-box;
	float: left;
	&:after, &:before {
		@extend .border-box;
	}
}
	
/* 
col
Mixin to set element covering variable number of columns per layout
When calling, pass the number of columns for each layout
*/
@mixin col($large_cols: $num_columns_large, $medium_cols:$num_columns_medium, $small_cols:$num_columns_small) {
	@extend .cell-base;
	@include col-desktop($large_cols);
	@include col-tablet($medium_cols);
	@include col-mobile($small_cols);
}

/*
col-mobile
Mixin to set element covering a number of columns for the mobile layout
When calling, pass the number of columns for the mobile layout
*/
@mixin col-mobile($small_cols) {
	@include responsive($breakpoint_small_layout - 1) {
		width: $column_width_small_layout * $small_cols;
	}
}

/*
col-tablet
Mixin to set element covering a number of columns for the tablet layout
When calling, pass the number of columns for the tablet layout
*/
@mixin col-tablet($medium_cols) {
	@include responsive($breakpoint_medium_layout - 1) {
		width: $column_width_medium_layout * $medium_cols;
	}
}

/*
col-desktop
Mixin to set element covering a number of columns for the desktop layout
When calling, pass the number of columns for the desktop layout
Note this is not wrapped in a media query (for older browser support) so should
come before mobile and tablet columns
*/
@mixin col-desktop($large_cols) {
    width: $column_width_large_layout * $large_cols;
}

/*
col-gutter
Class to add fixed gutter to a cell element as margin
*/
.col-gutter {
	margin-left: $gutter_large_layout/2;
	margin-right: $gutter_large_layout/2;

	@include responsive($breakpoint_medium_layout - 1) {
		margin-left: $gutter_medium_layout/2;
		margin-right: $gutter_medium_layout/2;
	}

	@include responsive($breakpoint_small_layout - 1) {
		margin-left: $gutter_small_layout/2;
		margin-right: $gutter_small_layout/2;
	}
}

/*
bleed-left
Class that bleeds a cell into the gutter on the left
*/
.bleed-left {
	margin-left: 0px;
}

/*
bleed-right
Class that bleeds a cell into the gutter on the right
*/
.bleed-right {
	margin-right: 0px;
}

@mixin offset-right($large_cols:$num_columns_large, $medium_cols:$num_columns_medium, $small_cols:$num_columns_small) {
	@include responsive($breakpoint_medium_layout - 1) {
		margin-left: $column_width_medium_layout * $medium_cols;
	}

	@include responsive($breakpoint_small_layout - 1) {
		margin-left: $column_width_small_layout * $small_cols;
	}

	margin-left: $column_width_large_layout * $large_cols;
}

@mixin offset-left($large_cols:$num_columns_large, $medium_cols:$num_columns_medium, $small_cols:$num_columns_small) {
	@include responsive($breakpoint_medium_layout - 1) {
		margin-right: $column_width_medium_layout * $medium_cols;
	}

	@include responsive($breakpoint_small_layout - 1) {
		margin-right: $column_width_small_layout * $small_cols;
	}

	margin-right: $column_width_large_layout * $large_cols;
}

/*
pull()
Moves a column to the left by a specified number of columns.
Use in combination with push() to swap the order of cells.
$large_cols: integer specifying the number of columns to move the element by in the large layout
$medium_cols: integer specifying the number of columns to move the element by in the medium layout
$small_cols: integer specifying the number of columns to move the element by in the small layout
*/
.pull-push-base {
	position: relative;
}

@mixin pull($large_cols, $medium_cols, $small_cols) {
	@extend .pull-push-base;
	@include pull-desktop($large_cols);
    @include pull-tablet($medium_cols);
    @include pull-mobile($small_cols);
}

@mixin pull-desktop($large_cols) {
	@extend .pull-push-base;
	left: -($column_width_large_layout * $large_cols);
}

@mixin pull-tablet($medium_cols) {
	@extend .pull-push-base;
	@include responsive($breakpoint_medium_layout - 1) {
		/* Move the column to the left
		(left == -BEFORE's width) */
		left: -($column_width_medium_layout * $medium_cols);
  	}
}

@mixin pull-mobile($small_cols) {
	@extend .pull-push-base;
	@include responsive($breakpoint_small_layout - 1) {
		left: -($column_width_small_layout * $small_cols);
	}
}

/*
push()
Moves a column to the right by a specified number of columns.
Use in combination with pull() to swap the order of cells.
$large_cols: integer specifying the number of columns to move the element by in the large layout
$medium_cols: integer specifying the number of columns to move the element by in the medium layout
$small_cols: integer specifying the number of columns to move the element by in the small layout
*/
@mixin push($large_cols, $medium_cols, $small_cols) {
	@extend .pull-push-base;
	@include push-desktop($large_cols);
    @include push-tablet($medium_cols);
    @include push-mobile($small_cols);
}

@mixin push-desktop($large_cols) {
	@extend .pull-push-base;
	left: ($column_width_large_layout * $large_cols);
}

@mixin push-tablet($medium_cols) {
	@extend .pull-push-base;
	@include responsive($breakpoint_medium_layout - 1) {
		/* Move the column to the right
		(left == -BEFORE's width) */
		left: ($column_width_medium_layout * $medium_cols);
	}
}

@mixin push-mobile($small_cols) {
	@extend .pull-push-base;
	@include responsive($breakpoint_small_layout - 1) {
		left: ($column_width_small_layout * $small_cols);
	}
}
